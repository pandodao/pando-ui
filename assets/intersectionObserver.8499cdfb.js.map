{"version":3,"file":"intersectionObserver.8499cdfb.js","sources":["../../node_modules/vuetify/lib/composables/intersectionObserver.mjs"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue';\nimport { SUPPORTS_INTERSECTION } from \"../util/index.mjs\";\nexport function useIntersectionObserver(callback) {\n  const intersectionRef = ref();\n  const isIntersecting = ref(false);\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver(entries => {\n      callback?.(entries, observer);\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting);\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        isIntersecting.value = false;\n      }\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n  return {\n    intersectionRef,\n    isIntersecting\n  };\n}\n//# sourceMappingURL=intersectionObserver.mjs.map"],"names":["useIntersectionObserver","callback","intersectionRef","ref","isIntersecting","SUPPORTS_INTERSECTION","observer","entries","entry","onBeforeUnmount","watch","newValue","oldValue","__name"],"mappings":"2LAGO,SAASA,EAAwBC,EAAU,CAChD,MAAMC,EAAkBC,IAClBC,EAAiBD,EAAI,EAAK,EAChC,GAAIE,EAAuB,CACzB,MAAMC,EAAW,IAAI,qBAAqBC,GAAW,CACnDN,GAAA,MAAAA,EAAWM,EAASD,GACpBF,EAAe,MAAQ,CAAC,CAACG,EAAQ,KAAKC,GAASA,EAAM,cAAc,CACzE,CAAK,EACDC,EAAgB,IAAM,CACpBH,EAAS,WAAU,CACzB,CAAK,EACDI,EAAMR,EAAiB,CAACS,EAAUC,IAAa,CACzCA,IACFN,EAAS,UAAUM,CAAQ,EAC3BR,EAAe,MAAQ,IAErBO,GAAUL,EAAS,QAAQK,CAAQ,CAC7C,EAAO,CACD,MAAO,MACb,CAAK,CACF,CACD,MAAO,CACL,gBAAAT,EACA,eAAAE,CACJ,CACA,CAzBgBS,EAAAb,EAAA"}