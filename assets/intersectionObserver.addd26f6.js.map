{"version":3,"file":"intersectionObserver.addd26f6.js","sources":["../../node_modules/vuetify/lib/composables/intersectionObserver.mjs"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue';\nimport { SUPPORTS_INTERSECTION } from \"../util/index.mjs\";\nexport function useIntersectionObserver(callback, options) {\n  const intersectionRef = ref();\n  const isIntersecting = shallowRef(false);\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver(entries => {\n      callback?.(entries, observer);\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting);\n    }, options);\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        isIntersecting.value = false;\n      }\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n  return {\n    intersectionRef,\n    isIntersecting\n  };\n}\n//# sourceMappingURL=intersectionObserver.mjs.map"],"names":["useIntersectionObserver","callback","options","intersectionRef","ref","isIntersecting","shallowRef","SUPPORTS_INTERSECTION","observer","entries","entry","onBeforeUnmount","watch","newValue","oldValue","__name"],"mappings":"gMAGO,SAASA,EAAwBC,EAAUC,EAAS,CACzD,MAAMC,EAAkBC,IAClBC,EAAiBC,EAAW,EAAK,EACvC,GAAIC,EAAuB,CACzB,MAAMC,EAAW,IAAI,qBAAqBC,GAAW,CACnDR,GAAA,MAAAA,EAAWQ,EAASD,GACpBH,EAAe,MAAQ,CAAC,CAACI,EAAQ,KAAKC,GAASA,EAAM,cAAc,CACpE,EAAER,CAAO,EACVS,EAAgB,IAAM,CACpBH,EAAS,WAAU,CACzB,CAAK,EACDI,EAAMT,EAAiB,CAACU,EAAUC,IAAa,CACzCA,IACFN,EAAS,UAAUM,CAAQ,EAC3BT,EAAe,MAAQ,IAErBQ,GAAUL,EAAS,QAAQK,CAAQ,CAC7C,EAAO,CACD,MAAO,MACb,CAAK,CACF,CACD,MAAO,CACL,gBAAAV,EACA,eAAAE,CACJ,CACA,CAzBgBU,EAAAf,EAAA"}