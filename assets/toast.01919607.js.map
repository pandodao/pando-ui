{"version":3,"file":"toast.01919607.js","sources":["../../packages/uikit/src/plugins/toast.ts"],"sourcesContent":["import { createVNode, render, getCurrentInstance, nextTick } from \"vue\";\nimport { FToast, types, ToastAction } from \"../components/FToast/FToast\";\n\nimport type { App, VNode } from \"vue\";\n\nexport interface ToastProps {\n  type?: typeof types[number];\n  message?: string;\n  action?: ToastAction;\n}\n\nexport interface ToastGlobalOptions {\n  location?: any;\n  timeout?: number;\n  container?: string;\n  [key: string]: any;\n}\n\nexport type ToastHandler = {\n  close: () => void;\n};\n\nexport type Keys = \"show\" | \"success\" | \"error\" | \"warning\" | \"clear\";\n\nexport type ToastPlugin = Record<Keys, (options?: ToastProps) => void>;\n\nexport function useToast() {\n  const instance = getCurrentInstance()!;\n\n  return instance.appContext.config.globalProperties.$uikit.toast;\n}\n\nfunction install(app: App, globalOptions: ToastGlobalOptions) {\n  let instance: VNode | null = null;\n\n  const show = (options: ToastProps = {}) => {\n    if (instance) {\n      instance.component!.exposed!.close();\n    }\n\n    nextTick(() => {\n      const mergedOptions = { ...globalOptions, ...options };\n      const appendTo = document.querySelector(\n        mergedOptions.container || \"[data-v-app]\"\n      );\n      const container = document.createElement(\"div\");\n      const vnode = createVNode(FToast, {\n        ...mergedOptions,\n        attach: container,\n        onDestroy: () => {\n          render(null, container);\n          instance = null;\n          appendTo?.removeChild(container);\n        },\n      });\n\n      vnode.appContext = app._context!;\n      render(vnode, container);\n      appendTo?.appendChild(container);\n      instance = vnode;\n\n      instance.component!.exposed!.show();\n    });\n  };\n\n  const clear = () => {\n    if (!instance) return;\n\n    instance!.component!.exposed!.close();\n  };\n\n  const toast = { show, clear };\n  const properties = app.config.globalProperties;\n\n  types.forEach((type) => {\n    toast[type] = (options: ToastProps) => show({ type, ...options });\n  });\n\n  properties.$uikit = properties.$uikit || {};\n  properties.$uikit.toast = toast as ToastPlugin;\n}\n\nexport function Toast() {}\n\nToast.install = install;\n"],"names":["useToast","getCurrentInstance","__name"],"mappings":"8JA0BO,SAASA,GAAW,CAGzB,OAFiBC,IAED,WAAW,OAAO,iBAAiB,OAAO,KAC5D,CAJgBC,EAAAF,EAAA"}